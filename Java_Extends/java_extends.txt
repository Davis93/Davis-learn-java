Java继承
Java继承是面向对象的一块基石，允许建立分等级层次的类
继承：子类继承父类的特征和行为（属性和动作）；使得子类（实例）对象具有父类实例域和方法；或子类从父类继承方法，是的子类与父类相同的行为。

继承格式： class 父类{ }
class 子类 extends 父类{ }

extends 用于继承只能是单继承 class A extends B；implements用于继承，可以实现多继承 class A implements B,C(B,C均为interface)

final关键字：final声明的类不可以被继承，最终类；或者用final修饰方法，该方法不能被子类重写
声明类： final class 类名{ //类体}
修饰方法： (private/public/default/protected)final 返回值类型 方法名（）{//方法体}

实例变量可以被定义为final,被final定义的变量不能修改；被声明为final类的方法自动声明为final;但实例变量并不是final


构造器
子类不能继承父类构造器；但父类构造器有参数的，必须在子类的构造器中显式的通过super关键字调用父类的构造器，并配以适当的参数列表
//此例子写得不太好，改日重写，谢谢！为什么SuperClass会调用？？？？
class SuperClass
{
	private int n;
	SuperClass()
	{
		System.out.println("SuperClass() ");
	}
	SuperClass(int n)
	{
		System.out.println("SuperClass(int n)");
		this.n=n;
	}
}

class SubClass extends SuperClass{
	private int n;
	SubClass()
	{
		super(1);
		System.out.println("SubClass()");
	}
	public SubClass(int n)
	{
		System.out.println("SubClass(int n):"+n);
		this.n=n;
	}
	
}
public class TestSuper_subConstructor {
	public static void main(String[] args)
	{
		SubClass sc=new SubClass();
		SubClass sc1=new SubClass(200);
	}
}
---------------------------------------------------------------------------
结果：SuperClass(int n)
SubClass()
SuperClass()    //为虾米会有这个？？？？？
SubClass(int n):200

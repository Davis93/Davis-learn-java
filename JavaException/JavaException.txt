Java异常(待学习)
2018/3/5: 
异常分为两个大类：Error类和Exception类；Error类代表了编译核系统错误；Exception类包含着运行异常Runtime_Exception 和非运行异常Non_RuntimeException（可检测异常）：java.util,java.lang,java.net均为非运行异常。

compiler 不对运行异常进行检查（任何情况都可能发生，为了避免巨大系统开销，故不对运行异常进行检查），运行异常对应编译错误；运行错误就表面代码有错误比如数组越界 or除以0 等都是错误。

对于可能可检测异常，方法或者构造方法的throw的子句必须列出该异常对于的类名

检查性异常（非运行异常）：不处理，编译无法通过
非检查性异常（运行时异常）：不处理编译可以通过，如果有抛出直接抛出到控制台





所有异常都是java.lang.Exception类继承的子类

异常是一些错误；但错误不是异常

Throwable下面有Exception类和Error类；Exception类下面有IOException类和RuntimeException类

Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。

Error用来指示运行时环境发生的错误。如JVM从内存中溢出，程序不会错误中恢复。


Java内置异常类：非检查性，检查性异常

异常方法：Throwable类主要方法
(1)public String getMessage（）
(2)public Throwable getCause()
(3)public String toString()
(4)public void printStackTrace()
(5)public StackTraceElement[] getStackTrace()
(6)public Throwable fillInStackTrace()


捕获异常
try/catch代码块中代码被称为保护代码块
try
{
  //代码
}catch(Exception name,e1)
{
  catch 块
}



多重块捕获
try
{
  //代码块
}catch(异常类型1，异常变量名1)
{
  //代码块
}catch(异常类型2，异常变量名2)
{
  //代码块
}catch(异常类型2，异常变量名2)
{
  //代码块
}

throws/throw关键字：若一个方法未捕获一个检查性异常，该方法必须用throws来声明，throws放在方法签名尾部；亦可用throw抛出一个异常不论其为新实例化还是刚捕捉到的。

finally 关键字：用于创建try后面执行代码；无论异常是否发生，finally代码块中代码都会执行；finally代码块一般位于catch代码最后，一般是一些善后的语句

try， catch， finally三者之间不能有其他任何代码；catch不能单独出现；try catch , try catch finally，try finally出现一个就行 


//finallyDemo
public class finallyTest {
	public static void main(String[] args)
	{
		int[] a=new int[2];
		try{   //try-catch类似一个分支结构
			System.out.println("Array element two:"+a[2]);
		}catch(ArrayIndexOutOfBoundsException e)
		{
			System.out.println("Exception thrown:"+e);
		}
		finally{ //finally后面都会执行
			a[0]=6;
			System.out.println("First array element is: "+a[0]);
			System.out.println("Finally language is executed");
		}
	}
}





